{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  repos: [],\n  loading: false,\n  error: null,\n  sortField: 'stargazers_count',\n  sortOrder: 'desc',\n  selectedRepo: null\n};\nexport const fetchRepos = createAsyncThunk('repos/fetchRepos', async query => {\n  const response = await axios.get(`https://api.github.com/search/repositories?q=${query}`);\n  return response.data.items;\n});\nconst repoSlice = createSlice({\n  name: 'repos',\n  initialState,\n  reducers: {\n    setSortField(state, action) {\n      state.sortField = action.payload;\n    },\n    setSortOrder(state, action) {\n      state.sortOrder = action.payload;\n    },\n    setSelectedRepo(state, action) {\n      state.selectedRepo = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchRepos.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchRepos.fulfilled, (state, action) => {\n      state.loading = false;\n      state.repos = action.payload;\n    }).addCase(fetchRepos.rejected, (state, action) => {\n      var _action$error$message;\n      state.loading = false;\n      state.error = (_action$error$message = action.error.message) !== null && _action$error$message !== void 0 ? _action$error$message : 'Error fetching repositories';\n    });\n  }\n});\nexport const {\n  setSortField,\n  setSortOrder,\n  setSelectedRepo\n} = repoSlice.actions;\nexport default repoSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","repos","loading","error","sortField","sortOrder","selectedRepo","fetchRepos","query","response","get","data","items","repoSlice","name","reducers","setSortField","state","action","payload","setSortOrder","setSelectedRepo","extraReducers","builder","addCase","pending","fulfilled","rejected","_action$error$message","message","actions","reducer"],"sources":["/Users/aleksandr/github-repo-search/src/redux/repoSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\ninterface Repo {\n    id: number;\n    name: string;\n    language: string;\n    forks_count: number;\n    stargazers_count: number;\n    updated_at: string;\n    description: string;\n    license: {\n      name: string;\n    } | null;\n  }\n\ninterface RepoState {\n  repos: Repo[];\n  loading: boolean;\n  error: string | null;\n  sortField: string;\n  sortOrder: 'asc' | 'desc';\n  selectedRepo: Repo | null;\n}\n\nconst initialState: RepoState = {\n  repos: [],\n  loading: false,\n  error: null,\n  sortField: 'stargazers_count',\n  sortOrder: 'desc',\n  selectedRepo: null,\n};\n\nexport const fetchRepos = createAsyncThunk(\n  'repos/fetchRepos',\n  async (query: string) => {\n    const response = await axios.get(`https://api.github.com/search/repositories?q=${query}`);\n    return response.data.items;\n  }\n);\n\nconst repoSlice = createSlice({\n  name: 'repos',\n  initialState,\n  reducers: {\n    setSortField(state, action: PayloadAction<string>) {\n      state.sortField = action.payload;\n    },\n    setSortOrder(state, action: PayloadAction<'asc' | 'desc'>) {\n      state.sortOrder = action.payload;\n    },\n    setSelectedRepo(state, action: PayloadAction<Repo | null>) {\n      state.selectedRepo = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchRepos.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchRepos.fulfilled, (state, action) => {\n        state.loading = false;\n        state.repos = action.payload;\n      })\n      .addCase(fetchRepos.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message ?? 'Error fetching repositories';\n      });\n  },\n});\n\nexport const { setSortField, setSortOrder, setSelectedRepo } = repoSlice.actions;\nexport default repoSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAC/E,OAAOC,KAAK,MAAM,OAAO;AAwBzB,MAAMC,YAAuB,GAAG;EAC9BC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,SAAS,EAAE,kBAAkB;EAC7BC,SAAS,EAAE,MAAM;EACjBC,YAAY,EAAE;AAChB,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGT,gBAAgB,CACxC,kBAAkB,EAClB,MAAOU,KAAa,IAAK;EACvB,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,gDAAgDF,KAAK,EAAE,CAAC;EACzF,OAAOC,QAAQ,CAACE,IAAI,CAACC,KAAK;AAC5B,CACF,CAAC;AAED,MAAMC,SAAS,GAAGhB,WAAW,CAAC;EAC5BiB,IAAI,EAAE,OAAO;EACbd,YAAY;EACZe,QAAQ,EAAE;IACRC,YAAYA,CAACC,KAAK,EAAEC,MAA6B,EAAE;MACjDD,KAAK,CAACb,SAAS,GAAGc,MAAM,CAACC,OAAO;IAClC,CAAC;IACDC,YAAYA,CAACH,KAAK,EAAEC,MAAqC,EAAE;MACzDD,KAAK,CAACZ,SAAS,GAAGa,MAAM,CAACC,OAAO;IAClC,CAAC;IACDE,eAAeA,CAACJ,KAAK,EAAEC,MAAkC,EAAE;MACzDD,KAAK,CAACX,YAAY,GAAGY,MAAM,CAACC,OAAO;IACrC;EACF,CAAC;EACDG,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACjB,UAAU,CAACkB,OAAO,EAAGR,KAAK,IAAK;MACtCA,KAAK,CAACf,OAAO,GAAG,IAAI;MACpBe,KAAK,CAACd,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDqB,OAAO,CAACjB,UAAU,CAACmB,SAAS,EAAE,CAACT,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACf,OAAO,GAAG,KAAK;MACrBe,KAAK,CAAChB,KAAK,GAAGiB,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDK,OAAO,CAACjB,UAAU,CAACoB,QAAQ,EAAE,CAACV,KAAK,EAAEC,MAAM,KAAK;MAAA,IAAAU,qBAAA;MAC/CX,KAAK,CAACf,OAAO,GAAG,KAAK;MACrBe,KAAK,CAACd,KAAK,IAAAyB,qBAAA,GAAGV,MAAM,CAACf,KAAK,CAAC0B,OAAO,cAAAD,qBAAA,cAAAA,qBAAA,GAAI,6BAA6B;IACrE,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEZ,YAAY;EAAEI,YAAY;EAAEC;AAAgB,CAAC,GAAGR,SAAS,CAACiB,OAAO;AAChF,eAAejB,SAAS,CAACkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}